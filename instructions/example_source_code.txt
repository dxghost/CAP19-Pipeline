10000000001000000000000000001010; Addi r1,r0,10		*** (1 begins) performing basic arithmetic operations
00000100010000000000100000000000; Add  r2,r0,r1		***
00001100011000000000100000000000; sub r3,r0,r1		***
00010100100000100001100000000000; And r4,r2,r3		***
10000100101000000000001000110100; Subi r5,r0,564		***
00011000101001010001100000000000; or r5,r5,r3		***
00011100110001010000000000000000; nor  r6,r5,r0		***
00100000000001010000100000000000; xor r0,r5,r1		***
00100000111001010000100000000000; xor r7,r5,r1		***
00100100111001000001000000000000; sla r7,r4,r2		***
00101001000000110001000000000000; sll r8,r3,r2		***
00101101001001100001000000000000; sra r9,r6,r2		***
00110001010001100001000000000000; srl r10,r6,r2		*** (1 ends)
10000000001000000000010000000000; Addi r1,r0,1024		*** (2 begins) exchanging some data with the memory
10010100010000010000000000000000; st r2,r1,0		***
10010001011000010000000000000000; ld r11,r1,0		***
10010100011000010000000000000100; st r3,r1,4		***
10010100100000010000000000001000; st r4,r1,8		***
10010100101000010000000000001100; st r5,r1,12		***
10010100110000010000000000010000; st r6,r1,16		***
10010100111000010000000000010100; st r7,r1,20		***
10010101000000010000000000011000; st r8,r1,24		***
10010101001000010000000000011100; st r9,r1,28		***
10010101010000010000000000100000; st r10,r1,32		***
10010101011000010000000000100100; st r11,r1,36		*** (2 ends)
10000000001000000000000000000011; Addi  r1,r0,3		*** =====> BUBBLE SORT BEGINS
10000000100000000000010000000000; Addi r4,r0,1024		***
10000000010000000000000000000000; Addi  r2,r0,0		***
10000000011000000000000000000001; Addi  r3,r0,1 		*** (outer loop begins)
10000001001000000000000000000010; Addi  r9,r0,2 		*** (inner loop begins)
00101001000000110100100000000000; sll r8,r3,r9		*** (3 begins) loading two consecutive numbers to compare
00000101000001000100000000000000; Add  r8,r4,r8		***
10010000101010000000000000000000; ld r5,r8,0 		***
10010000110010001111111111111100; ld r6,r8,-4 		***
00001101001001010011000000000000; sub  r9,r5,r6 		***
10000001010000001000000000000000; Addi  r10,r0,0x8000	***
10000001011000000000000000010000; Addi r11,r0,16		***
00101001010010100101100000000000; sll r10,r10,r11		***
00010101001010010101000000000000; And r9,r9,r10		*** (3 ends)
10100000000010010000000000000010; Bez r9,2 		*** (4 begins) swapping the two loaded numbers if needed
10010100101010001111111111111100; st r5,r8,-4 		***
10010100110010000000000000000000; st r6,r8,0 		*** (4 ends)
10000000011000110000000000000001; Addi  r3,r3,1		*** R3++
10100100011000011111111111110001; BNE r3,r1,-15 		*** (inner loop ends)
10000000010000100000000000000001; Addi  r2,r2,1		*** R2++
10100100010000011111111111101110; BNE r2,r1,-18 		*** (outer loop ends) =====> BUBBLE SORT ENDS
10000000001000000000010000000000; Addi  r1,r0,1024 	*** (5 begins) storing some register inside memory
10010000010000010000000000000000; ld r2,r1,0		***
10010000011000010000000000000100; ld r3,r1,4		***
10010000100000010000000000001000; ld r4,r1,8		***
10010000101000010000000000001100; ld r5,r1,12		***
10010000110000010000000000010000; ld r6,r1,16		***
10010000111000010000000000010100; ld r7,r1,20		***
10010001000000010000000000011000; ld r8,r1,24		***
10010001001000010000000000011100; ld r9,r1,28		***
10010001010000010000000000100000; ld r10,r1,32		***
10010001011000010000000000100100; ld r11,r1,36		*** (5 ends)
10101000000000001111111111111111; JMP  -1 			*** will keep jumping to itself
